// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebStore.Infrastructure.Data;

#nullable disable

namespace WebStore.Infrastructure.Migrations
{
    [DbContext(typeof(WebStoreDbContext))]
    [Migration("20241124123839_AddedDateOfBirthToApplicationUserAddedProductCustomerManyToManyRelationship")]
    partial class AddedDateOfBirthToApplicationUserAddedProductCustomerManyToManyRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChildSubcategoryParentSubcategory", b =>
                {
                    b.Property<Guid>("ChildSubcategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentSubcategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChildSubcategoriesId", "ParentSubcategoriesId");

                    b.HasIndex("ParentSubcategoriesId");

                    b.ToTable("ChildSubcategoryParentSubcategory");

                    b.HasData(
                        new
                        {
                            ChildSubcategoriesId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            ParentSubcategoriesId = new Guid("5f1efcf7-0a16-4079-ae7f-aebbd4f5ca3b")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("3716553d-4f92-4e15-a411-0ff574e459cc"),
                            ParentSubcategoriesId = new Guid("5f1efcf7-0a16-4079-ae7f-aebbd4f5ca3b")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("142ed5a1-52dc-4b2c-86a8-4694b479540e"),
                            ParentSubcategoriesId = new Guid("5f1efcf7-0a16-4079-ae7f-aebbd4f5ca3b")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("442951ae-8062-4b69-a2d2-e9ee52ab16d1"),
                            ParentSubcategoriesId = new Guid("5f1efcf7-0a16-4079-ae7f-aebbd4f5ca3b")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            ParentSubcategoriesId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("3716553d-4f92-4e15-a411-0ff574e459cc"),
                            ParentSubcategoriesId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("142ed5a1-52dc-4b2c-86a8-4694b479540e"),
                            ParentSubcategoriesId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("442951ae-8062-4b69-a2d2-e9ee52ab16d1"),
                            ParentSubcategoriesId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            ParentSubcategoriesId = new Guid("45c73d43-2499-422e-a5b5-5f0086331e51")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("3716553d-4f92-4e15-a411-0ff574e459cc"),
                            ParentSubcategoriesId = new Guid("45c73d43-2499-422e-a5b5-5f0086331e51")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("142ed5a1-52dc-4b2c-86a8-4694b479540e"),
                            ParentSubcategoriesId = new Guid("45c73d43-2499-422e-a5b5-5f0086331e51")
                        },
                        new
                        {
                            ChildSubcategoriesId = new Guid("442951ae-8062-4b69-a2d2-e9ee52ab16d1"),
                            ParentSubcategoriesId = new Guid("45c73d43-2499-422e-a5b5-5f0086331e51")
                        });
                });

            modelBuilder.Entity("CustomerProduct", b =>
                {
                    b.Property<Guid>("CustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CustomerProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("753efde4-efa1-4f88-abc9-8f091cf8b670"),
                            RoleId = new Guid("8027c9ed-85ce-4837-bf14-3ed6152e35ad")
                        },
                        new
                        {
                            UserId = new Guid("70852ff3-f2fc-4998-342b-08dc4da7e32c"),
                            RoleId = new Guid("85805833-8f47-4355-bd15-9465a8a65c07")
                        },
                        new
                        {
                            UserId = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6c"),
                            RoleId = new Guid("44e92506-a5bd-494a-b749-7d90bdfe9628")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            OrdersId = 1,
                            ProductsId = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6f")
                        },
                        new
                        {
                            OrdersId = 1,
                            ProductsId = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b69")
                        },
                        new
                        {
                            OrdersId = 1,
                            ProductsId = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b66")
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8027c9ed-85ce-4837-bf14-3ed6152e35ad"),
                            ConcurrencyStamp = "93a8d9e6-3e85-4e80-841f-8d0a502a5bea",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("44e92506-a5bd-494a-b749-7d90bdfe9628"),
                            ConcurrencyStamp = "c675d451-7dec-4e15-8933-76e1348cdc20",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("85805833-8f47-4355-bd15-9465a8a65c07"),
                            ConcurrencyStamp = "cccc29af-0d53-4faa-ba1e-b08218c7b14b",
                            Name = "Vip",
                            NormalizedName = "VIP"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of birth of the ApplicationUser");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creating the ApplicationUser");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("First name of the ApplicationUser");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Last name of the ApplicationUser");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("Holds info for the Application User entity");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9947113-0ca9-4025-b134-d9c8a4e10da9",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bojkata@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Bojidar",
                            LastName = "Bojidarov",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOJKATA@ABV.BG",
                            NormalizedUserName = "BOJKATA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAjqey14HWWFAUDzxJByYXpGScy5NqGPEQuHvzje4Z9if8DCZK3h/QQQ6DLtgM8wgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "675bdfac-f10f-4acc-a641-4233cd7a4c14",
                            TwoFactorEnabled = false,
                            UserName = "bojkata@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("753efde4-efa1-4f88-abc9-8f091cf8b670"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74ffae5e-6f35-4447-a8f7-75f91e7eabd3",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.BG",
                            NormalizedUserName = "ADMIN@ADMIN.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBxvWbcMLWE1fyxnWWKI4wpmRnAqsF5kMwC18HdngcD/1FycccE8HTBYWwe1v7SUVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efcff289-5cd2-42eb-8280-5faaab34daf5",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.bg"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier for the brand.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands", t =>
                        {
                            t.HasComment("Holds info for the Brand entity");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("361f69c3-cdfb-4156-a88a-1620db540c6c"),
                            ImageUrl = "https://logos-world.net/wp-content/uploads/2020/04/Chanel-Logo.png",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = new Guid("c3a935d2-8a70-40f4-aa02-7dc52d4688ed"),
                            ImageUrl = "https://logos-world.net/wp-content/uploads/2023/09/Marc-Jacobs-Logo.png",
                            Name = "Marc Jacobs"
                        },
                        new
                        {
                            Id = new Guid("6c86c626-bef8-4627-a314-de021502e335"),
                            ImageUrl = "https://logos-world.net/wp-content/uploads/2023/09/Gucci-Logo.png",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = new Guid("99f87405-5144-46e6-ad55-724d05928736"),
                            ImageUrl = "https://tukuz.com/wp-content/uploads/2020/05/viktor-rolf-logo-vector.png",
                            Name = "Viktor&Rolf"
                        },
                        new
                        {
                            Id = new Guid("586011c7-d606-4e73-a7e8-fca768656c03"),
                            ImageUrl = "https://asset.brandfetch.io/idVWaf5oDD/idG5I2RSGp.jpeg?updated=1667940456056",
                            Name = "Guerlain"
                        },
                        new
                        {
                            Id = new Guid("57d95637-ffa7-4109-9d26-03bae7e0e6e1"),
                            ImageUrl = "https://logowik.com/content/uploads/images/529_ysl.jpg",
                            Name = "Yves Saint Laurent"
                        },
                        new
                        {
                            Id = new Guid("28f3d7f5-3469-4036-b919-ec683688314b"),
                            ImageUrl = "https://1000logos.net/wp-content/uploads/2021/06/Tom-Ford-logo.png",
                            Name = "Tom Ford"
                        },
                        new
                        {
                            Id = new Guid("dc6ccd03-c8c8-47a8-b9fe-83e878b158f8"),
                            ImageUrl = "https://logos-world.net/wp-content/uploads/2020/11/Giorgio-Armani-Logo.png",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = new Guid("dc4a85cb-8f2d-452b-8027-c3409538c244"),
                            ImageUrl = "https://assets.turbologo.com/blog/en/2021/07/07061330/hermes-symbol-logo-1.png",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = new Guid("f33371d7-fa64-42f0-89bd-7f707e285279"),
                            ImageUrl = "https://aromacraze.com/images/thumbs/0025936_creed_420.jpeg",
                            Name = "Creed"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of the product category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the product category");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("Holds info for the Product Category entity");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            Name = "Fragrance"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ChildSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChildSubcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            Name = "EDP"
                        },
                        new
                        {
                            Id = new Guid("3716553d-4f92-4e15-a411-0ff574e459cc"),
                            Name = "EDT"
                        },
                        new
                        {
                            Id = new Guid("142ed5a1-52dc-4b2c-86a8-4694b479540e"),
                            Name = "Parfum"
                        },
                        new
                        {
                            Id = new Guid("442951ae-8062-4b69-a2d2-e9ee52ab16d1"),
                            Name = "EDC"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of the customer");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Address of the Customer entity");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("City of the Customer entity");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("State of the Customer entity");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ApplicationUser entity");

                    b.Property<string>("Zip")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Zip of the Customer entity");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers", t =>
                        {
                            t.HasComment("Holds info for the Customer entity");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d963508-bd53-4713-a82e-189a8dcc42b9"),
                            Address = "bul. Vitosha 1",
                            City = "Sofia",
                            State = "Sofia",
                            UserId = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6c"),
                            Zip = "1000"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key of the order");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of the Customer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the order");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasComment("Foreign key of the OrderStatus");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Holds info for the Order entity");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = new Guid("2d963508-bd53-4713-a82e-189a8dcc42b9"),
                            OrderDate = new DateTime(2024, 11, 24, 12, 38, 36, 492, DateTimeKind.Utc).AddTicks(5704),
                            OrderStatusId = 3
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key of the Order Status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the Order Status");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses", t =>
                        {
                            t.HasComment("Holds info for the Status of the Order");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Awaiting Payment"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Awaiting Fulfillment"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Awaiting Shipment"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Awaiting Pickup"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Partially Shipped"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Declined"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Refunded"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Disputed"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Manual Verification Required"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Partially Refunded"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ParentSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of the product subcategory");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Category entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the product subcategory");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ParentSubcategories", t =>
                        {
                            t.HasComment("Holds info for the Product Subcategory entity");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f1efcf7-0a16-4079-ae7f-aebbd4f5ca3b"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            Name = "Men"
                        },
                        new
                        {
                            Id = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            Name = "Women"
                        },
                        new
                        {
                            Id = new Guid("45c73d43-2499-422e-a5b5-5f0086331e51"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            Name = "Unisex"
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of the product");

                    b.Property<string>("BaseNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of the brand");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of the Category");

                    b.Property<Guid?>("ChildSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the product creation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the product");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image URL of the product");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("A flag which sets the product state as whether its visible or not");

                    b.Property<string>("MiddleNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the product");

                    b.Property<bool>("OnSale")
                        .HasColumnType("bit")
                        .HasComment("A flag which sets the product state whether its on sale or not");

                    b.Property<decimal>("OriginalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Original price of product");

                    b.Property<Guid?>("ParentSubcategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of the ParentSubcategory");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product available");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int")
                        .HasComment("Quantity of products sold");

                    b.Property<string>("TopNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChildSubcategoryId");

                    b.HasIndex("ParentSubcategoryId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Holds info for the Product entity");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6f"),
                            BrandId = new Guid("361f69c3-cdfb-4156-a88a-1620db540c6c"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(823),
                            Description = "Iconic blend of rose and jasmine, a classic from luxury brand Chanel",
                            ImageUrl = "https://www.sephora.com/productimages/sku/s465690-main-zoom.jpg?imwidth=612",
                            IsActive = false,
                            Name = "No. 5",
                            OnSale = false,
                            OriginalPrice = 120.34m,
                            ParentSubcategoryId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            Price = 120.34m,
                            Quantity = 9,
                            SoldCount = 37
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6e"),
                            BrandId = new Guid("c3a935d2-8a70-40f4-aa02-7dc52d4688ed"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("3716553d-4f92-4e15-a411-0ff574e459cc"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(833),
                            Description = "Youthful and fresh floral scent with notes of jasmine and violet",
                            ImageUrl = "https://www.sephora.com/productimages/sku/s1029958-main-zoom.jpg?imwidth=612",
                            IsActive = true,
                            Name = "Daisy",
                            OnSale = true,
                            OriginalPrice = 120.00m,
                            ParentSubcategoryId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            Price = 80.00m,
                            Quantity = 12,
                            SoldCount = 51
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6d"),
                            BaseNotes = "Orris Root, Honeysuckle",
                            BrandId = new Guid("6c86c626-bef8-4627-a314-de021502e335"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(838),
                            Description = "Modern and vibrant floral bouquet featuring tuberose and jasmine",
                            ImageUrl = "https://www.sephora.com/productimages/sku/s1964832-main-zoom.jpg?imwidth=612",
                            IsActive = true,
                            MiddleNotes = "Tuberose",
                            Name = "Bloom",
                            OnSale = true,
                            OriginalPrice = 179.99m,
                            ParentSubcategoryId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            Price = 149.99m,
                            Quantity = 193,
                            SoldCount = 12,
                            TopNotes = "Jasmine"
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6c"),
                            BrandId = new Guid("99f87405-5144-46e6-ad55-724d05928736"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(882),
                            Description = "Intensely floral with notes of jasmine, rose, and orchid",
                            ImageUrl = "https://www.sephora.com/productimages/sku/s1377159-main-zoom.jpg?imwidth=612",
                            IsActive = true,
                            Name = "Flowerbomb",
                            OnSale = false,
                            OriginalPrice = 110.82m,
                            ParentSubcategoryId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            Price = 110.82m,
                            Quantity = 23,
                            SoldCount = 84
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6b"),
                            BrandId = new Guid("586011c7-d606-4e73-a7e8-fca768656c03"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(888),
                            Description = "Timeless oriental scent with vanilla, iris, and amber notes",
                            ImageUrl = "https://douglas.bg/media/catalog/product/cache/dd4850ad4231b6306bceadf38a0bbeed/1/_/1_4439.jpg",
                            IsActive = true,
                            Name = "Shalimar",
                            OnSale = true,
                            OriginalPrice = 251.49m,
                            ParentSubcategoryId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            Price = 142.61m,
                            Quantity = 0,
                            SoldCount = 93
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b6a"),
                            BaseNotes = "Opoponax, Amber, Patchouli, Vanille",
                            BrandId = new Guid("57d95637-ffa7-4109-9d26-03bae7e0e6e1"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(897),
                            Description = "Rich and spicy oriental fragrance with exotic undertones",
                            ImageUrl = "https://www.yslbeautyus.com/dw/image/v2/AANG_PRD/on/demandware.static/-/Sites-ysl-master-catalog/default/dwfd20b6ef/Fragrance/Fragrance/Opium_Eau_De_Toilette_Spray/3365440556386_Opium-Eau-De-Tpilette-Spray_01.jpg?sw=698&sh=698&sm=cut&sfrm=jpg&q=85",
                            IsActive = false,
                            MiddleNotes = "Myrhh, Jasmine",
                            Name = "Opium",
                            OnSale = false,
                            OriginalPrice = 101.00m,
                            ParentSubcategoryId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            Price = 101.00m,
                            Quantity = 4,
                            SoldCount = 34,
                            TopNotes = "Mandarin Orange, Bergamot, Lily-of-the-Valley"
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b69"),
                            BaseNotes = "Mexican Chocolate, Patchouli, Vanille, Incense, Amber, Sandalwood, Vetiver, White Musk",
                            BrandId = new Guid("28f3d7f5-3469-4036-b919-ec683688314b"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(902),
                            Description = "Luxurious blend of black truffle, vanilla, and orchid",
                            ImageUrl = "https://www.sephora.com/productimages/sku/s1007731-main-zoom.jpg?imwidth=612",
                            IsActive = true,
                            MiddleNotes = "Orchid, Spices, Gardenia, Fruity Notes, Ylang-Ylang, Jasmine, Lostus",
                            Name = "Black Orchid",
                            OnSale = false,
                            OriginalPrice = 180.00m,
                            ParentSubcategoryId = new Guid("98c91d15-4a4c-4fc4-b226-f9835e1560d2"),
                            Price = 180.00m,
                            Quantity = 17,
                            SoldCount = 133,
                            TopNotes = "Truffle, Gardenia, Black Currant, Ylang-Ylang, Jasmine, Bergamot, Mandarin Orange, Amalfi Lemon"
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b68"),
                            BrandId = new Guid("dc6ccd03-c8c8-47a8-b9fe-83e878b158f8"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("3716553d-4f92-4e15-a411-0ff574e459cc"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(907),
                            Description = "Fresh and aquatic scent with notes of citrus and rosemary",
                            ImageUrl = "https://www.sephora.com/productimages/sku/s397299-main-zoom.jpg?imwidth=612",
                            IsActive = true,
                            Name = "Acqua di Gio",
                            OnSale = true,
                            OriginalPrice = 121.21m,
                            ParentSubcategoryId = new Guid("5f1efcf7-0a16-4079-ae7f-aebbd4f5ca3b"),
                            Price = 85.00m,
                            Quantity = 95,
                            SoldCount = 32
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b67"),
                            BrandId = new Guid("dc4a85cb-8f2d-452b-8027-c3409538c244"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(916),
                            Description = "Citrusy and woody fragrance with notes of grapefruit and cedar",
                            ImageUrl = "https://www.sephora.com/productimages/sku/s915447-main-zoom.jpg?imwidth=612",
                            IsActive = true,
                            Name = "Terre d'Hermès",
                            OnSale = true,
                            OriginalPrice = 333.33m,
                            ParentSubcategoryId = new Guid("5f1efcf7-0a16-4079-ae7f-aebbd4f5ca3b"),
                            Price = 120.00m,
                            Quantity = 52,
                            SoldCount = 3
                        },
                        new
                        {
                            Id = new Guid("c0a0d5a0-4b6a-4b6a-8f4a-0c8f0b6f0b66"),
                            BrandId = new Guid("f33371d7-fa64-42f0-89bd-7f707e285279"),
                            CategoryId = new Guid("53146915-6199-44eb-aedb-e9902299be6c"),
                            ChildSubcategoryId = new Guid("0eff9eb3-f46f-408b-bb68-561e136aef76"),
                            CreatedOn = new DateTime(2024, 11, 24, 12, 38, 36, 359, DateTimeKind.Utc).AddTicks(921),
                            Description = "Fresh and fruity scent with notes of pineapple and blackcurrant",
                            ImageUrl = "https://www.creedfragrances.co.uk/cdn/shop/files/Clear-logo-with-black-hair.jpg?v=1708086869&width=750",
                            IsActive = true,
                            Name = "Aventus",
                            OnSale = false,
                            OriginalPrice = 249.99m,
                            ParentSubcategoryId = new Guid("45c73d43-2499-422e-a5b5-5f0086331e51"),
                            Price = 249.99m,
                            Quantity = 0,
                            SoldCount = 86
                        });
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of the review");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Comment of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creating the review");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of the Customer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of the product");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("Rating for the reviewed product");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Title of the review");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of updating the review");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasComment("Holds info for the Review entity");
                        });
                });

            modelBuilder.Entity("ChildSubcategoryParentSubcategory", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.ChildSubcategory", null)
                        .WithMany()
                        .HasForeignKey("ChildSubcategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.ParentSubcategory", null)
                        .WithMany()
                        .HasForeignKey("ParentSubcategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerProduct", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Customer", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.ApplicationUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("WebStore.Infrastructure.Data.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Order", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ParentSubcategory", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("ParentSubcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Product", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.ChildSubcategory", "ChildSubcategory")
                        .WithMany("Products")
                        .HasForeignKey("ChildSubcategoryId");

                    b.HasOne("WebStore.Infrastructure.Data.Entities.ParentSubcategory", "ParentSubcategory")
                        .WithMany("Products")
                        .HasForeignKey("ParentSubcategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("ChildSubcategory");

                    b.Navigation("ParentSubcategory");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Review", b =>
                {
                    b.HasOne("WebStore.Infrastructure.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Infrastructure.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Navigation("ParentSubcategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ChildSubcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebStore.Infrastructure.Data.Entities.ParentSubcategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
